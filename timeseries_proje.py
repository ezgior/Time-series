{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.069254Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.069565Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.080693Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.069530Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.079933Z\"}}\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.082250Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.082453Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.092443Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.082428Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.091791Z\"}}\n# Importing required libraries\nimport numpy as np\nimport pandas as pd, datetime\nimport seaborn as sns\nfrom statsmodels.tsa.stattools import adfuller\nimport matplotlib.pyplot as plt\nget_ipython().run_line_magic('matplotlib', 'inline')\nfrom time import time\nimport os\nfrom math import sqrt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport itertools\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import acf,pacf\nfrom statsmodels.tsa.arima_model import  ARIMA \nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn import model_selection\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom pandas import DataFrame\nimport xgboost as xgb\nfrom fbprophet import Prophet\nimport warnings\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\nwarnings.filterwarnings('ignore')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.093415Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.094028Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.123245Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.093981Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.122359Z\"}}\n# Importing store data\nstore = pd.read_csv('../input/rossmann-store-sales/store.csv')\nstore.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.125157Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.126016Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.774037Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.125970Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.773112Z\"}}\n# Importing train data\ntrain = pd.read_csv('../input/rossmann-store-sales/train.csv', index_col='Date', parse_dates = True)\ntrain.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.775316Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.775546Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.780327Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.775514Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.779683Z\"}}\ntrain.shape\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.781401Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.781653Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.800285Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.781625Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.799701Z\"}}\ntrain[train.index=='2015-07-31'].DayOfWeek\n\n# %% [raw] {\"execution\":{\"iopub.status.busy\":\"2021-11-17T12:58:57.00203Z\",\"iopub.execute_input\":\"2021-11-17T12:58:57.002397Z\",\"iopub.status.idle\":\"2021-11-17T12:58:57.01705Z\",\"shell.execute_reply.started\":\"2021-11-17T12:58:57.002358Z\",\"shell.execute_reply\":\"2021-11-17T12:58:57.016217Z\"}}\n# #train.index=='2015-07-31'\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.801185Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.801489Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.812777Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.801449Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.811807Z\"}}\nstore = pd.read_csv('../input/rossmann-store-sales/store.csv')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.815132Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.816065Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.833527Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.816019Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.832579Z\"}}\nstore.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.834798Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.835585Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.840381Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.835548Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.839497Z\"}}\nstore.columns =store.columns.str.lower()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.841552Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.842155Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.861686Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.842127Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.860761Z\"}}\ntrain.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.863258Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.863778Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.870938Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.863743Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.869980Z\"}}\ntrain.reset_index(inplace = True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.872574Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.872965Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.880251Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.872932Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.879179Z\"}}\n#train= train.groupby(['Date']).sum()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.881699Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.882215Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.901545Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.882183Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.900569Z\"}}\ntrain.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.902902Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.903644Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.914935Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.903598Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.914077Z\"}}\n# Function to test the stationarity\ndef test_stationarity(timeseries):\n    \n    # Determing rolling statistics\n    roll_mean = timeseries.rolling(window=7).mean()\n    roll_std = timeseries.rolling(window=7).std()\n\n    # Plotting rolling statistics:\n    orig = plt.plot(timeseries.resample('W').mean(), color='blue',label='Original')\n    mean = plt.plot(roll_mean.resample('W').mean(), color='red', label='Rolling Mean')\n    std = plt.plot(roll_std.resample('W').mean(), color='green', label = 'Rolling Std')\n    plt.legend(loc='best')\n    plt.show(block=False)\n    \n    # Performing Dickey-Fuller test:\n    print('Results of Dickey-Fuller Test:')\n    result = adfuller(timeseries, autolag='AIC')\n    print('ADF Statistic: %f' % result[0])\n    print('p-value: %f' % result[1])\n    print('Critical Values:')\n    for key, value in result[4].items():\n           print(key, value)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.916367Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.917227Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.926242Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.917174Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.925674Z\"}}\n\n# Durağanlık Testi (Dickey-Fuller Testi)\ndef is_stationary(y):\n\n    # \"HO: Non-stationary\"\n    # \"H1: Stationary\"\n\n    p_value = sm.tsa.stattools.adfuller(y)[1]\n    if p_value < 0.05:\n        print(F\"Result: Stationary (H0: non-stationary, p-value: {round(p_value, 3)})\")\n    else:\n        print(F\"Result: Non-Stationary (H0: non-stationary, p-value: {round(p_value, 3)})\")\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.927221Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.927771Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.944270Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.927737Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.943397Z\"}}\nsales =train[['Date','Sales']]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.945495Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.945882Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.956424Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.945849Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.955740Z\"}}\nsales.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.957603Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.957974Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.969484Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.957944Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.968888Z\"}}\ntrain.columns\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.970594Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.970940Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.981752Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.970912Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.980839Z\"}}\nsales.set_index('Date',inplace = True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:36.985797Z\",\"iopub.execute_input\":\"2021-11-21T12:08:36.986427Z\",\"iopub.status.idle\":\"2021-11-21T12:08:36.998892Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:36.986389Z\",\"shell.execute_reply\":\"2021-11-21T12:08:36.997935Z\"}}\nsales.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:37.000272Z\",\"iopub.execute_input\":\"2021-11-21T12:08:37.000624Z\",\"iopub.status.idle\":\"2021-11-21T12:08:37.122643Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:37.000582Z\",\"shell.execute_reply\":\"2021-11-21T12:08:37.121775Z\"}}\nSales_=sales['Sales'].resample('W').mean()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:37.124301Z\",\"iopub.execute_input\":\"2021-11-21T12:08:37.125036Z\",\"iopub.status.idle\":\"2021-11-21T12:08:37.131637Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:37.124988Z\",\"shell.execute_reply\":\"2021-11-21T12:08:37.130823Z\"}}\nSales_.shape\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:37.132722Z\",\"iopub.execute_input\":\"2021-11-21T12:08:37.133350Z\",\"iopub.status.idle\":\"2021-11-21T12:08:37.145447Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:37.133316Z\",\"shell.execute_reply\":\"2021-11-21T12:08:37.144639Z\"}}\ntrain_ = Sales_[:\"2014\"]\ntrain_.shape\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:37.147189Z\",\"iopub.execute_input\":\"2021-11-21T12:08:37.148097Z\",\"iopub.status.idle\":\"2021-11-21T12:08:37.158825Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:37.148052Z\",\"shell.execute_reply\":\"2021-11-21T12:08:37.158034Z\"}}\ntest_ =Sales_[\"2015\":]\ntest_.shape\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:37.159838Z\",\"iopub.execute_input\":\"2021-11-21T12:08:37.160354Z\",\"iopub.status.idle\":\"2021-11-21T12:08:37.173751Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:37.160325Z\",\"shell.execute_reply\":\"2021-11-21T12:08:37.172938Z\"}}\nis_stationary(Sales_)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:37.174925Z\",\"iopub.execute_input\":\"2021-11-21T12:08:37.175570Z\",\"iopub.status.idle\":\"2021-11-21T12:08:38.758513Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:37.175538Z\",\"shell.execute_reply\":\"2021-11-21T12:08:38.757674Z\"}}\n\n# Zaman Serisi Bileşenleri ve Durağanlık Testi\ndef ts_decompose(y, model=\"additive\", stationary=False):\n    result = seasonal_decompose(y, model=model)\n    fig, axes = plt.subplots(4, 1, sharex=True, sharey=False)\n    fig.set_figheight(10)\n    fig.set_figwidth(15)\n\n    axes[0].set_title(\"Decomposition for \" + model + \" model\")\n    axes[0].plot(y, 'k', label='Original ' + model)\n    axes[0].legend(loc='upper left')\n\n    axes[1].plot(result.trend, label='Trend')\n    axes[1].legend(loc='upper left')\n\n    axes[2].plot(result.seasonal, 'g', label='Seasonality & Mean: ' + str(round(result.seasonal.mean(), 4)))\n    axes[2].legend(loc='upper left')\n\n    axes[3].plot(result.resid, 'r', label='Residuals & Mean: ' + str(round(result.resid.mean(), 4)))\n    axes[3].legend(loc='upper left')\n    plt.show(block=True)\n\n    if stationary:\n        is_stationary(y)\n\n# Toplamsal ve çarpımsal modeller için analiz\nfor model in [\"additive\", \"multiplicative\"]:\n    ts_decompose(Sales_, model, stationary=True)\n\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:38.759783Z\",\"iopub.execute_input\":\"2021-11-21T12:08:38.760284Z\",\"iopub.status.idle\":\"2021-11-21T12:08:44.607169Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:38.760240Z\",\"shell.execute_reply\":\"2021-11-21T12:08:44.606355Z\"}}\nsales.plot()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:44.608763Z\",\"iopub.execute_input\":\"2021-11-21T12:08:44.608987Z\",\"iopub.status.idle\":\"2021-11-21T12:08:44.651769Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:44.608961Z\",\"shell.execute_reply\":\"2021-11-21T12:08:44.650719Z\"}}\ntest = pd.read_csv('../input/rossmann-store-sales/test.csv')\ntest.head()\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:44.653209Z\",\"iopub.execute_input\":\"2021-11-21T12:08:44.653415Z\",\"iopub.status.idle\":\"2021-11-21T12:08:44.660375Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:44.653391Z\",\"shell.execute_reply\":\"2021-11-21T12:08:44.659336Z\"}}\ntest = test[\"Date\"].unique()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:44.662081Z\",\"iopub.execute_input\":\"2021-11-21T12:08:44.662310Z\",\"iopub.status.idle\":\"2021-11-21T12:08:44.675245Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:44.662284Z\",\"shell.execute_reply\":\"2021-11-21T12:08:44.674603Z\"}}\ntest\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:44.676579Z\",\"iopub.execute_input\":\"2021-11-21T12:08:44.676836Z\",\"iopub.status.idle\":\"2021-11-21T12:08:44.691143Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:44.676806Z\",\"shell.execute_reply\":\"2021-11-21T12:08:44.690016Z\"}}\ntest_.shape\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:44.692396Z\",\"iopub.execute_input\":\"2021-11-21T12:08:44.692705Z\",\"iopub.status.idle\":\"2021-11-21T12:08:44.703093Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:44.692676Z\",\"shell.execute_reply\":\"2021-11-21T12:08:44.701981Z\"}}\n#train_arima = sales.resample(\"MS\").mean() \n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:44.704917Z\",\"iopub.execute_input\":\"2021-11-21T12:08:44.706102Z\",\"iopub.status.idle\":\"2021-11-21T12:08:45.018728Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:44.706064Z\",\"shell.execute_reply\":\"2021-11-21T12:08:45.017725Z\"}}\nSales_.plot()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:45.019865Z\",\"iopub.execute_input\":\"2021-11-21T12:08:45.020086Z\",\"iopub.status.idle\":\"2021-11-21T12:08:45.025987Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:45.020060Z\",\"shell.execute_reply\":\"2021-11-21T12:08:45.025186Z\"}}\nSales_.shape\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:45.027131Z\",\"iopub.execute_input\":\"2021-11-21T12:08:45.027450Z\",\"iopub.status.idle\":\"2021-11-21T12:08:45.042747Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:45.027419Z\",\"shell.execute_reply\":\"2021-11-21T12:08:45.041591Z\"}}\n# Define the p, d and q parameters to take any value between 0 and 3\np = d = q = range(0, 2)\n\n# Generate all different combinations of p, q and q triplets\npdq = list(itertools.product(p, d, q))\n\n# Generate all different combinations of seasonal p, q and q triplets\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\n\nprint('Examples of parameter combinations for Seasonal ARIMA: ')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:08:45.044078Z\",\"iopub.execute_input\":\"2021-11-21T12:08:45.044629Z\",\"iopub.status.idle\":\"2021-11-21T12:12:13.435579Z\",\"shell.execute_reply.started\":\"2021-11-21T12:08:45.044582Z\",\"shell.execute_reply\":\"2021-11-21T12:12:13.434618Z\"}}\n\n#hyperparameter optimization  AIC e gore\np = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 52) for x in list(itertools.product(p, d, q))]\n\ndef sarima_optimizer_aic(train_, pdq, seasonal_pdq):\n    best_aic, best_order, best_seasonal_order = float(\"inf\"), float(\"inf\"), None\n    for param in pdq:\n        for param_seasonal in seasonal_pdq:\n            try:\n                sarimax_model = SARIMAX(train_, order=param, seasonal_order=param_seasonal)\n                results = sarimax_model.fit(disp=0)\n                aic = results.aic\n                if aic < best_aic:\n                    best_aic, best_order, best_seasonal_order = aic, param, param_seasonal\n                print('SARIMA{}x{}52 - AIC:{}'.format(param, param_seasonal, aic))\n            except:\n                continue\n    print('SARIMA{}x{}52 - AIC:{}'.format(best_order, best_seasonal_order, best_aic))\n    return best_order, best_seasonal_order\n\n\nbest_order, best_seasonal_order = sarima_optimizer_aic(train_, pdq, seasonal_pdq)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:12:13.437266Z\",\"iopub.execute_input\":\"2021-11-21T12:12:13.437856Z\",\"iopub.status.idle\":\"2021-11-21T12:12:18.807628Z\",\"shell.execute_reply.started\":\"2021-11-21T12:12:13.437802Z\",\"shell.execute_reply\":\"2021-11-21T12:12:18.806640Z\"}}\n\n############################\n# Final Model\n############################\n\nmodel = SARIMAX(train_, order=best_order, seasonal_order=best_seasonal_order)\nsarima_final_model = model.fit(disp=0)\n\ny_pred_test = sarima_final_model.get_forecast(steps=31)\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:12:18.809226Z\",\"iopub.execute_input\":\"2021-11-21T12:12:18.810022Z\",\"iopub.status.idle\":\"2021-11-21T12:12:18.822246Z\",\"shell.execute_reply.started\":\"2021-11-21T12:12:18.809968Z\",\"shell.execute_reply\":\"2021-11-21T12:12:18.821365Z\"}}\ntest_\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:12:18.824065Z\",\"iopub.execute_input\":\"2021-11-21T12:12:18.824628Z\",\"iopub.status.idle\":\"2021-11-21T12:12:18.838200Z\",\"shell.execute_reply.started\":\"2021-11-21T12:12:18.824584Z\",\"shell.execute_reply\":\"2021-11-21T12:12:18.836586Z\"}}\ny_pred = y_pred_test.predicted_mean\ny_pred = pd.Series(y_pred, index=test_.index)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:12:18.839918Z\",\"iopub.execute_input\":\"2021-11-21T12:12:18.840264Z\",\"iopub.status.idle\":\"2021-11-21T12:12:18.854506Z\",\"shell.execute_reply.started\":\"2021-11-21T12:12:18.840222Z\",\"shell.execute_reply\":\"2021-11-21T12:12:18.853354Z\"}}\ny_pred.shape\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:12:18.856342Z\",\"iopub.execute_input\":\"2021-11-21T12:12:18.857023Z\",\"iopub.status.idle\":\"2021-11-21T12:12:19.204910Z\",\"shell.execute_reply.started\":\"2021-11-21T12:12:18.856972Z\",\"shell.execute_reply\":\"2021-11-21T12:12:19.203891Z\"}}\n y_pred.plot(legend=True, label=\"PREDICTION\")\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:12:19.206307Z\",\"iopub.execute_input\":\"2021-11-21T12:12:19.206819Z\",\"iopub.status.idle\":\"2021-11-21T12:12:19.514665Z\",\"shell.execute_reply.started\":\"2021-11-21T12:12:19.206771Z\",\"shell.execute_reply\":\"2021-11-21T12:12:19.513842Z\"}}\ntest_.plot()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:12:19.516004Z\",\"iopub.execute_input\":\"2021-11-21T12:12:19.516246Z\",\"iopub.status.idle\":\"2021-11-21T12:12:19.851802Z\",\"shell.execute_reply.started\":\"2021-11-21T12:12:19.516216Z\",\"shell.execute_reply\":\"2021-11-21T12:12:19.850822Z\"}}\n# test datasinda sales oladigi icin pred ile test karsilastirilamaz\ndef plot_sales(train_, test_, y_pred, title):\n    mae = mean_absolute_error(test_, y_pred)\n    Sales_[\"2013\":].plot(legend=True, label=\"TRAIN\", title=f\"{title}, MAE: {round(mae,2)}\")\n    test_.plot(legend=True, label=\"TEST\", figsize=(6, 4))\n    y_pred.plot(legend=True, label=\"PREDICTION\")\n    plt.show()\n# MAE  \ny_pred = y_pred_test.predicted_mean\ny_pred = pd.Series(y_pred, index=test_.index)\n\nplot_sales(train_, test_, y_pred, \"SARIMA\")\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:12:19.853038Z\",\"iopub.execute_input\":\"2021-11-21T12:12:19.853264Z\",\"iopub.status.idle\":\"2021-11-21T12:15:46.724216Z\",\"shell.execute_reply.started\":\"2021-11-21T12:12:19.853235Z\",\"shell.execute_reply\":\"2021-11-21T12:15:46.723261Z\"}}\n# mean abs errora gore\n\np = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 52) for x in list(itertools.product(p, d, q))]\n\ndef sarima_optimizer_mae(train_, pdq, seasonal_pdq):\n    best_mae, best_order, best_seasonal_order = float(\"inf\"), float(\"inf\"), None\n    for param in pdq:\n        for param_seasonal in seasonal_pdq:\n            try:\n                model = SARIMAX(train_, order=param, seasonal_order=param_seasonal)\n                sarima_model = model.fit(disp=0)\n                y_pred_test = sarima_model.get_forecast(steps=31)\n                y_pred = y_pred_test.predicted_mean\n                mae = mean_absolute_error(test_, y_pred)\n\n                # mae = fit_model_sarima(train, val, param, param_seasonal)\n\n                if mae < best_mae:\n                    best_mae, best_order, best_seasonal_order = mae, param, param_seasonal\n                print('SARIMA{}x{}52 - MAE:{}'.format(param, param_seasonal, mae))\n            except:\n                continue\n    print('SARIMA{}x{}52 - MAE:{}'.format(best_order, best_seasonal_order, best_mae))\n    return best_order, best_seasonal_order\n\nbest_order, best_seasonal_order = sarima_optimizer_mae(train_, pdq, seasonal_pdq)\n\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:46.725744Z\",\"iopub.execute_input\":\"2021-11-21T12:15:46.727122Z\",\"iopub.status.idle\":\"2021-11-21T12:15:47.576091Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:46.727082Z\",\"shell.execute_reply\":\"2021-11-21T12:15:47.574916Z\"}}\nmodel = SARIMAX(train_, order=best_order, seasonal_order=best_seasonal_order)\nsarima_final_model = model.fit(disp=0)\n\ny_pred_test = sarima_final_model.get_forecast(steps=31)\ny_pred = y_pred_test.predicted_mean\ny_pred = pd.Series(y_pred, index=test_.index)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:47.578008Z\",\"iopub.execute_input\":\"2021-11-21T12:15:47.578733Z\",\"iopub.status.idle\":\"2021-11-21T12:15:47.924186Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:47.578681Z\",\"shell.execute_reply\":\"2021-11-21T12:15:47.923346Z\"}}\ny_pred.plot()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:47.925672Z\",\"iopub.execute_input\":\"2021-11-21T12:15:47.926479Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.261566Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:47.926419Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.260711Z\"}}\nplot_sales(train_, test_, y_pred, \"SARIMA\")\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.262986Z\",\"iopub.execute_input\":\"2021-11-21T12:15:48.264012Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.271600Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.263966Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.270815Z\"}}\ntest_.isnull().sum()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:24:39.195177Z\",\"iopub.execute_input\":\"2021-11-21T12:24:39.195869Z\",\"iopub.status.idle\":\"2021-11-21T12:24:39.383320Z\",\"shell.execute_reply.started\":\"2021-11-21T12:24:39.195778Z\",\"shell.execute_reply\":\"2021-11-21T12:24:39.382529Z\"}}\n\n# TES = SES + DES + Mevsimsellik\n\ntes_model = ExponentialSmoothing(train_,trend=\"add\",\n                                 seasonal=\"add\",\n                                 seasonal_periods=52).fit(smoothing_level=0.5,\n                                                          smoothing_slope=0.5,\n                                                          smoothing_seasonal=0.5)\n\n\ny_pred = tes_model.forecast(31)\n\n\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.514752Z\",\"iopub.execute_input\":\"2021-11-21T12:15:48.515061Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.521151Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.515021Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.520090Z\"}}\ntes_model\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:24:42.724540Z\",\"iopub.execute_input\":\"2021-11-21T12:24:42.725160Z\",\"iopub.status.idle\":\"2021-11-21T12:24:42.732742Z\",\"shell.execute_reply.started\":\"2021-11-21T12:24:42.725119Z\",\"shell.execute_reply\":\"2021-11-21T12:24:42.731904Z\"}}\ny_pred\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:24:48.475515Z\",\"iopub.execute_input\":\"2021-11-21T12:24:48.475937Z\",\"iopub.status.idle\":\"2021-11-21T12:24:48.806145Z\",\"shell.execute_reply.started\":\"2021-11-21T12:24:48.475905Z\",\"shell.execute_reply\":\"2021-11-21T12:24:48.805197Z\"}}\nplot_sales(train_, test_, y_pred, \"Triple Exponential Smoothing\")\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:17:21.994983Z\",\"iopub.execute_input\":\"2021-11-21T12:17:21.995890Z\",\"iopub.status.idle\":\"2021-11-21T12:17:22.192969Z\",\"shell.execute_reply.started\":\"2021-11-21T12:17:21.995799Z\",\"shell.execute_reply\":\"2021-11-21T12:17:22.191797Z\"}}\n\n# TES = SES + DES + Mevsimsellik\n\ntes_model_add = ExponentialSmoothing(train_,\n                                 trend=\"add\",\n                                 seasonal=\"add\",\n                                 seasonal_periods=52).fit(smoothing_level=0.5,\n                                                          smoothing_slope=0.5,\n                                                          smoothing_seasonal=0.5)\n\n\ny_pred_add= tes_model_add.forecast(31)\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:17:24.533584Z\",\"iopub.execute_input\":\"2021-11-21T12:17:24.535673Z\",\"iopub.status.idle\":\"2021-11-21T12:17:24.875184Z\",\"shell.execute_reply.started\":\"2021-11-21T12:17:24.535619Z\",\"shell.execute_reply\":\"2021-11-21T12:17:24.874375Z\"}}\nplot_sales(train_, test_, y_pred_add, \"Triple Exponential Smoothing\")\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:26:04.059363Z\",\"iopub.execute_input\":\"2021-11-21T12:26:04.059676Z\",\"iopub.status.idle\":\"2021-11-21T12:26:04.067891Z\",\"shell.execute_reply.started\":\"2021-11-21T12:26:04.059642Z\",\"shell.execute_reply\":\"2021-11-21T12:26:04.066696Z\"}}\n#################################\n# Triple Exponential Smoothing (Holt-Winters)\n#################################\n\ndef tes_optimizer(train_, abg, step=31):\n    best_alpha, best_beta, best_gamma, best_mae = None, None, None, float(\"inf\")\n    for comb in abg:\n        tes_model = ExponentialSmoothing(train_, trend=\"add\", seasonal=\"add\", seasonal_periods=52).\\\n            fit(smoothing_level=comb[0], smoothing_slope=comb[1], smoothing_seasonal=comb[2])\n        y_pred = tes_model.forecast(step)\n        mae = mean_absolute_error(test_, y_pred)\n        if mae < best_mae:\n            best_alpha, best_beta, best_gamma, best_mae = comb[0], comb[1], comb[2], mae\n        print([round(comb[0], 2), round(comb[1], 2), round(comb[2], 2), round(mae, 2)])\n\n    print(\"best_alpha:\", round(best_alpha, 2), \"best_beta:\", round(best_beta, 2), \"best_gamma:\", round(best_gamma, 2),\n          \"best_mae:\", round(best_mae, 4))\n\n    return best_alpha, best_beta, best_gamma, best_mae\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:26:08.614100Z\",\"iopub.execute_input\":\"2021-11-21T12:26:08.614792Z\",\"iopub.status.idle\":\"2021-11-21T12:26:31.242768Z\",\"shell.execute_reply.started\":\"2021-11-21T12:26:08.614742Z\",\"shell.execute_reply\":\"2021-11-21T12:26:31.241927Z\"}}\n\nalphas = betas = gammas = np.arange(0.10, 1, 0.20)\nabg = list(itertools.product(alphas, betas, gammas))\n\nbest_alpha, best_beta, best_gamma, best_mae = tes_optimizer(train_, abg, step=31)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:26:35.233843Z\",\"iopub.execute_input\":\"2021-11-21T12:26:35.234118Z\",\"iopub.status.idle\":\"2021-11-21T12:26:35.242040Z\",\"shell.execute_reply.started\":\"2021-11-21T12:26:35.234085Z\",\"shell.execute_reply\":\"2021-11-21T12:26:35.240936Z\"}}\ny_pred\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:23:24.625761Z\",\"iopub.execute_input\":\"2021-11-21T12:23:24.626215Z\",\"iopub.status.idle\":\"2021-11-21T12:23:24.630437Z\",\"shell.execute_reply.started\":\"2021-11-21T12:23:24.626167Z\",\"shell.execute_reply\":\"2021-11-21T12:23:24.629726Z\"}}\ndef plot_prediction(y_pred, label):\n    \n    train_.plot(legend=True, label=\"TRAIN\")\n    test_.plot(legend=True, label=\"TEST\")\n    y_pred.plot(legend=True, label=\"PREDICTION\")\n    plt.title(\"Train, Test and Predicted Test Using \"+label)\n    plt.show()\n\n\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:26:40.494155Z\",\"iopub.execute_input\":\"2021-11-21T12:26:40.494724Z\",\"iopub.status.idle\":\"2021-11-21T12:26:40.893597Z\",\"shell.execute_reply.started\":\"2021-11-21T12:26:40.494683Z\",\"shell.execute_reply\":\"2021-11-21T12:26:40.892929Z\"}}\n\ntes_model = ExponentialSmoothing(train_, trend=\"add\", seasonal=\"add\", seasonal_periods=12).\\\n            fit(smoothing_level=best_alpha, smoothing_slope=best_beta, smoothing_seasonal=best_gamma)\n\ny_pred = tes_model.forecast(31)\n\nplot_prediction(y_pred, \"Triple Exponential Smoothing ADD\")\n\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:26:49.727691Z\",\"iopub.execute_input\":\"2021-11-21T12:26:49.728005Z\",\"iopub.status.idle\":\"2021-11-21T12:26:50.061048Z\",\"shell.execute_reply.started\":\"2021-11-21T12:26:49.727971Z\",\"shell.execute_reply\":\"2021-11-21T12:26:50.060044Z\"}}\n\nplot_sales(train_, test_, y_pred, \"tes\")\n\n\n# %% [markdown]\n# # Machine Learning\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.602882Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.603251Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.603107Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.603122Z\"}}\n\n########################\n# Date Features\n########################\n\n\ndef create_date_features(df):\n    df['month'] = df.date.dt.month\n    df['day_of_month'] = df.date.dt.day\n    df['day_of_year'] = df.date.dt.dayofyear\n    df['week_of_year'] = df.date.dt.weekofyear\n    df['day_of_week'] = df.date.dt.dayofweek\n    df['year'] = df.date.dt.year\n    df[\"is_wknd\"] = df.date.dt.weekday // 4\n    df['is_month_start'] = df.date.dt.is_month_start.astype(int)\n    df['is_month_end'] = df.date.dt.is_month_end.astype(int)\n    \n    return df\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.604026Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.604413Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.604259Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.604275Z\"}}\ntrain.reset_index(inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.605201Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.605623Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.605437Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.605453Z\"}}\ntrain.columns= train.columns.str.lower()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.606430Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.606845Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.606697Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.606713Z\"}}\ntrain.columns\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.607596Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.607984Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.607829Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.607849Z\"}}\n\ntrain = create_date_features(train)\n\n\n\ntrain.head(15)\n\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.608788Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.609169Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.609023Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.609039Z\"}}\n\n#############################################\n# 2. MISSING VALUES\n#############################################\ndef missing_values_table(dataframe, na_name=False):\n    na_columns = [col for col in dataframe.columns if dataframe[col].isnull().sum() > 0]\n    n_miss = dataframe[na_columns].isnull().sum().sort_values(ascending=False)\n    ratio = (dataframe[na_columns].isnull().sum() / dataframe.shape[0] * 100).sort_values(ascending=False)\n    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=['n_miss', 'ratio'])\n    print(missing_df, end=\"\\n\")\n    if na_name:\n        return na_columns\n\ndef missing_vs_target(dataframe, target, na_columns):\n    temp_df = dataframe.copy()\n    for col in na_columns:\n        temp_df[col + '_NA_FLAG'] = np.where(temp_df[col].isnull(), 1, 0)\n    na_flags = temp_df.loc[:, temp_df.columns.str.contains(\"_NA_\")].columns\n    for col in na_flags:\n        print(pd.DataFrame({\"TARGET_MEAN\": temp_df.groupby(col)[target].mean(),\n                            \"Count\": temp_df.groupby(col)[target].count()}), end=\"\\n\\n\\n\")\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.609966Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.610346Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.610194Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.610209Z\"}}\n\n# adding new variable\ntrain['SaleperCustomer'] = train['sales']/train['customers']\n#############  Drop  closed stores  ###############\nzero_sales = train[(train.open != 0) & (train.sales == 0)]\nprint(\"In total: \", zero_sales.shape)\nzero_sales.head(5)\n\nprint(\"Closed stores and days which didn't have any sales won't be counted into the forecasts.\")\ntrain = train[(train[\"open\"] == 1) & (train['sales'] != 0)]\n\nprint(\"In total: \", train.shape)\n\nna_columns = missing_values_table(store, na_name=True)\n\n# fill NaN with a median value (skewed distribuion) #### MOD\nstore['competitiondistance'].fillna(store['competitiondistance'].mode(), inplace = True)\n\n# replace NA's by 0\nstore[\"promo2sinceweek\" ].fillna(0, inplace = True)\nstore[\"promo2sinceyear\" ].fillna(0, inplace = True)\n\n# replace NA's by 0\nstore= store[store['competitionopensincemonth'].notnull()]  #######  MOD\nprint(\"Joining train set with an additional store information.\")\n\n# by specifying inner join we make sure that only those observations\n# that are present in both train and store sets are merged together\ntrain_store = pd.merge(train, store, how = 'inner', on = 'store')\n\nprint(\"In total: \", train_store.shape)\ntrain_store.isnull().sum()\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.611179Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.611575Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.611416Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.611432Z\"}}\ntrain_store.columns\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.612305Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.612746Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.612552Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.612576Z\"}}\n\n# competition open time (in months)\ntrain_store['CompetitionOpen_inmonth'] = 12 * (train_store.year - train_store.competitionopensinceyear) + \\\n        (train_store.month - train_store.competitionopensincemonth)\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.613689Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.614172Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.614002Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.614026Z\"}}\n\n# Promo open time\ntrain_store['PromoOpen_inmonth'] = 12 * (train_store.year - train_store.promo2sinceyear) + \\\n        (train_store.week_of_year - train_store.promo2sinceweek) / 4.0\ntrain_store.drop(columns = [\"promo2sinceweek\",\"promo2sinceyear\",\"competitionopensinceyear\",\\\n                            \"competitionopensincemonth\"],inplace =True)\n\n\n# Distribution of sales and customers across store types\ntrain_store.groupby('storetype')['customers', 'sales', 'SaleperCustomer']\\\n    .sum().sort_values('sales', ascending=False)\n\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.615189Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.615513Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.615325Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.615345Z\"}}\n# Compute the correlation matrix\n# exclude 'Open' variable\ncorr_all = train_store.drop('open', axis = 1).corr()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.616625Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.616931Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.616767Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.616788Z\"}}\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr_all, dtype = np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize = (11, 9))\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr_all, mask = mask,\n            square = True, linewidths = .5, ax = ax, cmap = \"BuPu\")\nplt.show()\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.618071Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.618371Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.618211Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.618232Z\"}}\n\n# sale per customer trends\nsns.factorplot(data = train_store, x = 'day_of_week', y = \"sales\",\n               col = 'promo',\n               row = 'year',\n               hue = 'promo2',\n               palette = 'RdPu')\n\n# Sales trend over the months\nsns.factorplot(data = train_store, x =\"month\", y = \"sales\",\n               col = 'promo', # per store type in cols\n               hue = 'promo2',\n               row = \"year\"\n             );\n\n\n\n\n\n# %% [markdown]\n# # MACHINE LEARNING\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.619456Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.619768Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.619610Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.619631Z\"}}\ntrain_store.head()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.620821Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.621122Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.620969Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.620990Z\"}}\n\ndef random_noise(dataframe):\n    return np.random.normal(scale=1.6, size=(len(dataframe),))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.621991Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.622284Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.622126Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.622147Z\"}}\ntest = pd.read_csv('../input/rossmann-store-sales/test.csv')\ntest.head()\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.623402Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.623721Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.623564Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.623586Z\"}}\npd.to_datetime(test.date)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.624786Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.625450Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.625247Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.625269Z\"}}\nnp.datetime64(train_store.date[90])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.626489Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.626784Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.626629Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.626650Z\"}}\ntest.columns=test.columns.str.lower()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.627884Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.628989Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.628800Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.628821Z\"}}\ndf= pd.concat([train_store, test], sort=False)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.629751Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.630383Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.630187Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.630213Z\"}}\ndf.head()\n\n# %% [markdown]\n# # EDA FUNCTIONS\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.631933Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.632710Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.632517Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.632541Z\"}}\n\n\ndef cat_summary(dataframe, col_name, plot=False):\n    import pandas as pd\n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                        \"Ratio\": 100 * dataframe[col_name].value_counts() / len(dataframe)}))\n    print(\"##########################################\")\n\n    if plot:\n        sns.countplot(x=dataframe[col_name], data=dataframe)\n        plt.show()\n\n\ndef num_summary(dataframe, numerical_col, plot=False):\n\n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n\n    print(dataframe[numerical_col].describe(quantiles).T)\n\n    if plot:\n        dataframe[numerical_col].hist(bins=20)\n        plt.xlabel(numerical_col)\n        plt.title(numerical_col)\n        plt.show()\n\ndef grab_col_names(dataframe, cat_th=10, car_th=20):\n    \"\"\"\n\n    Veri setindeki kategorik, numerik ve kategorik fakat kardinal değişkenlerin isimlerini verir.\n    Not: Kategorik değişkenlerin içerisine numerik görünümlü kategorik değişkenler de dahildir.\n\n    Parameters\n    ------\n        dataframe: dataframe\n                Değişken isimleri alınmak istenilen dataframe\n        cat_th: int, optional\n                numerik fakat kategorik olan değişkenler için sınıf eşik değeri\n        car_th: int, optional\n                kategorik fakat kardinal değişkenler için sınıf eşik değeri\n\n    Returns\n    ------\n        cat_cols: list\n                Kategorik değişken listesi\n        num_cols: list\n                Numerik değişken listesi\n        cat_but_car: list\n                Kategorik görünümlü kardinal değişken listesi\n\n    Examples\n    ------\n        import seaborn as sns\n        df = sns.load_dataset(\"iris\")\n        print(grab_col_names(df))\n\n\n    Notes\n    ------\n        cat_cols + num_cols + cat_but_car = toplam değişken sayısı\n        num_but_cat cat_cols'un içerisinde.\n\n    \"\"\"\n\n\n    # cat_cols, cat_but_car\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n\n    cat_cols = cat_cols + num_but_cat\n\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    # num_cols\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n\n    return cat_cols, num_cols, cat_but_car\n\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.633966Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.634264Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.634110Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.634130Z\"}}\ncat_cols, num_cols, cat_but_car = grab_col_names(df, cat_th=10, car_th=20)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.635627Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.635945Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.635769Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.635790Z\"}}\ndf.date.unique()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.637125Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.637446Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.637261Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.637282Z\"}}\ndf.sort_values(by=num_cols, axis=0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T12:15:48.638632Z\",\"iopub.status.idle\":\"2021-11-21T12:15:48.638962Z\",\"shell.execute_reply.started\":\"2021-11-21T12:15:48.638772Z\",\"shell.execute_reply\":\"2021-11-21T12:15:48.638791Z\"}}\n\n#Siralama onemli kaydirma yontemi yaparken karisabilir\ndf.sort_values(by=['store', 'date'], axis=0)\n\n# %% [code]\n","metadata":{"_uuid":"117c9562-e530-49d1-ae51-135385fbaecc","_cell_guid":"21036055-4727-4bcb-b137-b3cf7835eda7","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}